name: Auto-merge Dependabot PRs

on:
  workflow_dispatch:

jobs:
  merge-dependabot:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Merge All Dependabot PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Fetching all open pull requests...');
            
            // Fetch all open PRs
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`Found ${openPRs.length} open PR(s)`);
            
            // Filter for Dependabot PRs
            const dependabotPRs = openPRs.filter(pr => 
              pr.user.login === 'dependabot[bot]' || pr.user.login === 'dependabot-preview[bot]'
            );
            
            console.log(`Found ${dependabotPRs.length} Dependabot PR(s)`);
            
            if (dependabotPRs.length === 0) {
              console.log('No Dependabot PRs to merge');
              return;
            }
            
            // Process each Dependabot PR
            for (const pr of dependabotPRs) {
              try {
                console.log(`\nProcessing PR #${pr.number}: ${pr.title}`);
                
                // Get latest PR status
                let prData = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });
                prData = prData.data;
                
                // Check if PR is draft
                if (prData.draft) {
                  console.log(`‚è≠Ô∏è Skipping PR #${pr.number} - it's a draft`);
                  continue;
                }
                
                // Check if PR is already merged
                if (prData.merged) {
                  console.log(`‚è≠Ô∏è Skipping PR #${pr.number} - already merged`);
                  continue;
                }
                
                // Check mergeability
                if (prData.mergeable === false) {
                  console.log(`‚ö†Ô∏è PR #${pr.number} has merge conflicts or cannot be merged`);
                  continue;
                }
                
                // Check if mergeable state is still being computed
                if (prData.mergeable_state === 'unknown' || prData.mergeable === null) {
                  console.log(`‚è≥ PR #${pr.number} mergeability is being computed, checking again...`);
                  
                  // Wait a bit and check again
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  
                  const updatedPr = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                  });
                  
                  if (updatedPr.data.mergeable === false) {
                    console.log(`‚ö†Ô∏è PR #${pr.number} has merge conflicts`);
                    continue;
                  }
                  
                  prData = updatedPr.data;
                }
                
                // Approve the PR first (required if branch protection requires approval)
                try {
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    event: 'APPROVE',
                    body: 'ü§ñ Auto-approved by GitHub Actions'
                  });
                  console.log(`‚úÖ Approved PR #${pr.number}`);
                } catch (approveError) {
                  // Ignore if already approved or approval not needed
                  if (!approveError.message.includes('already approved') && !approveError.message.includes('422')) {
                    console.log(`‚ÑπÔ∏è Could not approve PR #${pr.number}: ${approveError.message}`);
                  }
                }
                
                // Merge the PR
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'squash' // Can be 'merge', 'squash', or 'rebase'
                });
                
                console.log(`üéâ Merged PR #${pr.number}`);
              } catch (error) {
                console.error(`‚ùå Error processing PR #${pr.number}: ${error.message}`);
              }
            }
            
            console.log(`\n‚ú® Finished processing ${dependabotPRs.length} Dependabot PR(s)`);
